
RN4020_Advertiser_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006bd  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000626  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800100  00800100  000006ba  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000006bd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000012c4  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000424  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006b1  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b0  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000381  00000000  00000000  0000279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000ac  00000000  00000000  00002b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00002bc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__ctors_end>
   4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
   c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  10:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  14:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  18:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  1c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  20:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  24:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  28:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  2c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  30:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  34:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  38:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  3c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  44:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  48:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_18>
  4c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  50:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  54:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  58:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  5c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  60:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  68:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  6c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  70:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  74:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  7c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  80:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  84:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  8c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  90:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  94:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  98:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  9c:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a4:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  a8:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  ac:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b0:	0c 94 80 00 	jmp	0x100	; 0x100 <__bad_interrupt>
  b4:	ab 02       	muls	r26, r27
  b6:	6a 02       	muls	r22, r26
  b8:	5c 02       	muls	r21, r28
  ba:	be 02       	muls	r27, r30
  bc:	be 02       	muls	r27, r30
  be:	ab 02       	muls	r26, r27
  c0:	1e 02       	muls	r17, r30
  c2:	34 02       	muls	r19, r20
  c4:	54 02       	muls	r21, r20
  c6:	be 02       	muls	r27, r30
  c8:	ab 02       	muls	r26, r27
  ca:	08 02       	muls	r16, r24
  cc:	15 02       	muls	r17, r21
  ce:	a6 02       	muls	r26, r22
  d0:	1e 02       	muls	r17, r30
  d2:	34 02       	muls	r19, r20
  d4:	54 02       	muls	r21, r20
  d6:	be 02       	muls	r27, r30
  d8:	ab 02       	muls	r26, r27
  da:	98 02       	muls	r25, r24

000000dc <__ctors_end>:
  dc:	11 24       	eor	r1, r1
  de:	1f be       	out	0x3f, r1	; 63
  e0:	cf ef       	ldi	r28, 0xFF	; 255
  e2:	d8 e0       	ldi	r29, 0x08	; 8
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	cd bf       	out	0x3d, r28	; 61

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a0 e0       	ldi	r26, 0x00	; 0
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	ab 37       	cpi	r26, 0x7B	; 123
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>
  f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  fc:	0c 94 11 03 	jmp	0x622	; 0x622 <_exit>

00000100 <__bad_interrupt>:
 100:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000104 <ToChracter>:

// Convert value to character.
void ToChracter( void )
{
	// 0 ~ 9.
	if( temp1 < 10 ){
 104:	80 91 54 01 	lds	r24, 0x0154
 108:	8a 30       	cpi	r24, 0x0A	; 10
 10a:	20 f4       	brcc	.+8      	; 0x114 <ToChracter+0x10>
		temp1 += 0x30;
 10c:	80 5d       	subi	r24, 0xD0	; 208
 10e:	80 93 54 01 	sts	0x0154, r24
		return;
 112:	08 95       	ret
	}
	// A ~ F.
	temp1 -= 10;
	temp1 += 0x41;	
 114:	89 5c       	subi	r24, 0xC9	; 201
 116:	80 93 54 01 	sts	0x0154, r24
 11a:	08 95       	ret

0000011c <Device_Task>:
// device task.
void Device_Task( void ){
	
	// TWI task busy check.
	temp1 = twi0_task_status;
	temp1 &= 0x01;
 11c:	80 91 04 01 	lds	r24, 0x0104
 120:	81 70       	andi	r24, 0x01	; 1
 122:	80 93 54 01 	sts	0x0154, r24
	if( temp1 ){
 126:	81 11       	cpse	r24, r1
 128:	50 c0       	rjmp	.+160    	; 0x1ca <Device_Task+0xae>
		// Still busy.
		return;
	}
	
	// UART data transmit busy check.
	if( uart0_trn_cnt ){
 12a:	80 91 64 01 	lds	r24, 0x0164
 12e:	81 11       	cpse	r24, r1
 130:	4c c0       	rjmp	.+152    	; 0x1ca <Device_Task+0xae>
		// Still busy.
		return;
	}
	
	// check delay counter.
	if( meas_delay ){
 132:	80 91 77 01 	lds	r24, 0x0177
 136:	81 11       	cpse	r24, r1
 138:	48 c0       	rjmp	.+144    	; 0x1ca <Device_Task+0xae>
		return;
	}
		
	switch( dev_task_cnt ){
 13a:	80 91 75 01 	lds	r24, 0x0175
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	f1 f0       	breq	.+60     	; 0x17e <Device_Task+0x62>
 142:	28 f4       	brcc	.+10     	; 0x14e <Device_Task+0x32>
 144:	88 23       	and	r24, r24
 146:	41 f0       	breq	.+16     	; 0x158 <Device_Task+0x3c>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	89 f0       	breq	.+34     	; 0x16e <Device_Task+0x52>
 14c:	08 95       	ret
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	09 f1       	breq	.+66     	; 0x194 <Device_Task+0x78>
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	79 f1       	breq	.+94     	; 0x1b4 <Device_Task+0x98>
 156:	08 95       	ret
				
		case 0:
			// Start HIH6130 measurement.	
			HIHI6130_Measure_Request();
 158:	0e 94 e6 00 	call	0x1cc	; 0x1cc <HIHI6130_Measure_Request>
			// Next task.
			++dev_task_cnt;
 15c:	80 91 75 01 	lds	r24, 0x0175
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 75 01 	sts	0x0175, r24
			// Reset measurement delay count.
			// 100ms.
			meas_delay = 10;
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	80 93 77 01 	sts	0x0177, r24
			break;
 16c:	08 95       	ret
					
		case 1:
			// Read measurement data.
			HIH6130_I2C_On_HT();
 16e:	0e 94 ef 00 	call	0x1de	; 0x1de <HIH6130_I2C_On_HT>
			// Next task.
			++dev_task_cnt;			
 172:	80 91 75 01 	lds	r24, 0x0175
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 75 01 	sts	0x0175, r24
			break;
 17c:	08 95       	ret
		
		case 2:
			// Convert measurement value.
			// Update broadcast data.
			HIH6130_Get_HT();
 17e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <HIH6130_Get_HT>
			// Next task.
			++dev_task_cnt;
 182:	80 91 75 01 	lds	r24, 0x0175
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	80 93 75 01 	sts	0x0175, r24
			// Reset measurement delay count.
			// 50ms.
			meas_delay = 5;						
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	80 93 77 01 	sts	0x0177, r24
			break;
 192:	08 95       	ret
			
		case 3:
			// Start broadcast.
			puart0_trn_data = cmd_start_broadcast;
 194:	88 e4       	ldi	r24, 0x48	; 72
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	90 93 01 01 	sts	0x0101, r25
 19c:	80 93 00 01 	sts	0x0100, r24
			uart0_trn_cnt = 13;
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	80 93 64 01 	sts	0x0164, r24
			// Next task.
			++dev_task_cnt;
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	80 93 75 01 	sts	0x0175, r24
			// Reset measurement delay count.
			// 1200ms.
			meas_delay = 120;					
 1ac:	88 e7       	ldi	r24, 0x78	; 120
 1ae:	80 93 77 01 	sts	0x0177, r24
			break;
 1b2:	08 95       	ret
			
		case 4:
			// Stop broadcast.
			puart0_trn_data = cmd_stop_broadcast;
 1b4:	88 e7       	ldi	r24, 0x78	; 120
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	90 93 01 01 	sts	0x0101, r25
 1bc:	80 93 00 01 	sts	0x0100, r24
			uart0_trn_cnt = 2;
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 64 01 	sts	0x0164, r24
			// Next task.
			dev_task_cnt = 0;		
 1c6:	10 92 75 01 	sts	0x0175, r1
 1ca:	08 95       	ret

000001cc <HIHI6130_Measure_Request>:

// Measurement request.
void HIHI6130_Measure_Request( void )
{
	// SLA.
    twi0_addr = HIH6130_WR;        
 1cc:	8e e4       	ldi	r24, 0x4E	; 78
 1ce:	80 93 7a 01 	sts	0x017A, r24
    // Trigger on write task.
	TWI0_On_Write();
 1d2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <TWI0_On_Write>
	// Set task count.
	twi0_task_cnt = 19;
 1d6:	83 e1       	ldi	r24, 0x13	; 19
 1d8:	80 93 03 01 	sts	0x0103, r24
 1dc:	08 95       	ret

000001de <HIH6130_I2C_On_HT>:

// Read humidity and temperature data.
void HIH6130_I2C_On_HT( void )
{	
	// SLA.
    twi0_addr = HIH6130_RD;        	
 1de:	8f e4       	ldi	r24, 0x4F	; 79
 1e0:	80 93 7a 01 	sts	0x017A, r24
	// 4 byte to read.
	twi0_data_cnt = 4;
 1e4:	84 e0       	ldi	r24, 0x04	; 4
 1e6:	80 93 02 01 	sts	0x0102, r24
	// Trigger on read task.
	TWI0_On_Read();	
 1ea:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <TWI0_On_Read>
 1ee:	08 95       	ret

000001f0 <HIH6130_Get_HT>:
}

// Get humidity and temperature.
void HIH6130_Get_HT( void )
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	// Humidity high byte.
	temp1 = twi0_data[0];
 1f8:	06 e0       	ldi	r16, 0x06	; 6
 1fa:	11 e0       	ldi	r17, 0x01	; 1
	temp1 >>= 4;
 1fc:	f8 01       	movw	r30, r16
 1fe:	80 81       	ld	r24, Z
 200:	82 95       	swap	r24
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	80 93 54 01 	sts	0x0154, r24
	ToChracter();
 208:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[2] = temp1;		
 20c:	c7 e5       	ldi	r28, 0x57	; 87
 20e:	d1 e0       	ldi	r29, 0x01	; 1
 210:	80 91 54 01 	lds	r24, 0x0154
 214:	8a 83       	std	Y+2, r24	; 0x02
	temp1 = twi0_data[0];
	temp1 &= 0x0f;
 216:	f8 01       	movw	r30, r16
 218:	80 81       	ld	r24, Z
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	80 93 54 01 	sts	0x0154, r24
	ToChracter();	
 220:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[3] = temp1;
 224:	80 91 54 01 	lds	r24, 0x0154
 228:	8b 83       	std	Y+3, r24	; 0x03
	// Humidity low byte.
	temp1 = twi0_data[1];
	temp1 >>= 4;
 22a:	f8 01       	movw	r30, r16
 22c:	81 81       	ldd	r24, Z+1	; 0x01
 22e:	82 95       	swap	r24
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	80 93 54 01 	sts	0x0154, r24
	ToChracter();
 236:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[4] = temp1;	
 23a:	80 91 54 01 	lds	r24, 0x0154
 23e:	8c 83       	std	Y+4, r24	; 0x04
	temp1 = twi0_data[1];
	temp1 &= 0x0f;
 240:	f8 01       	movw	r30, r16
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	8f 70       	andi	r24, 0x0F	; 15
 246:	80 93 54 01 	sts	0x0154, r24
	ToChracter();	
 24a:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[5] = temp1;
 24e:	80 91 54 01 	lds	r24, 0x0154
 252:	8d 83       	std	Y+5, r24	; 0x05
	// Temperature high byte.	
	temp1 = twi0_data[2];
	temp1 >>= 4;
 254:	f8 01       	movw	r30, r16
 256:	82 81       	ldd	r24, Z+2	; 0x02
 258:	82 95       	swap	r24
 25a:	8f 70       	andi	r24, 0x0F	; 15
 25c:	80 93 54 01 	sts	0x0154, r24
	ToChracter();
 260:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[6] = temp1;	
 264:	80 91 54 01 	lds	r24, 0x0154
 268:	8e 83       	std	Y+6, r24	; 0x06
	temp1 = twi0_data[2];
	temp1 &= 0x0f;
 26a:	f8 01       	movw	r30, r16
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	80 93 54 01 	sts	0x0154, r24
	ToChracter();	
 274:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[7] = temp1;
 278:	80 91 54 01 	lds	r24, 0x0154
 27c:	8f 83       	std	Y+7, r24	; 0x07
	// Temperature low byte.
	temp1 = twi0_data[3];
	temp1 >>= 4;
 27e:	f8 01       	movw	r30, r16
 280:	83 81       	ldd	r24, Z+3	; 0x03
 282:	82 95       	swap	r24
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	80 93 54 01 	sts	0x0154, r24
	ToChracter();
 28a:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[8] = temp1;
 28e:	80 91 54 01 	lds	r24, 0x0154
 292:	88 87       	std	Y+8, r24	; 0x08
	temp1 = twi0_data[3];
	temp1 &= 0x0f;
 294:	f8 01       	movw	r30, r16
 296:	83 81       	ldd	r24, Z+3	; 0x03
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	80 93 54 01 	sts	0x0154, r24
	ToChracter();	
 29e:	0e 94 82 00 	call	0x104	; 0x104 <ToChracter>
	hih6130_value[9] = temp1;
 2a2:	80 91 54 01 	lds	r24, 0x0154
 2a6:	89 87       	std	Y+9, r24	; 0x09
	
	// Prepare UART transmitting data.
	puart0_trn_data = hih6130_value;
 2a8:	d0 93 01 01 	sts	0x0101, r29
 2ac:	c0 93 00 01 	sts	0x0100, r28
	uart0_trn_cnt = 11;	
 2b0:	8b e0       	ldi	r24, 0x0B	; 11
 2b2:	80 93 64 01 	sts	0x0164, r24
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	08 95       	ret

000002c0 <main>:
};

int main(void)
{
	// System clock prescaler 1.
	CLKPR = 0x80;  // Enable.
 2c0:	e1 e6       	ldi	r30, 0x61	; 97
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
	CLKPR = 0x00;  // Write value.
 2c8:	10 82       	st	Z, r1
	
	// Timer #0 initialize.
	Timer0_Init();
 2ca:	0e 94 ab 01 	call	0x356	; 0x356 <Timer0_Init>
	// UART #0 initialize.
	UART0_Init();
 2ce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART0_Init>
	// TWI #0 initialize.
	TWI0_Init();
 2d2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <TWI0_Init>
		
	// Variable reset.	
	// RN4020 command, stop broadcast.
	cmd_stop_broadcast[0] = 'X';
 2d6:	a8 e7       	ldi	r26, 0x78	; 120
 2d8:	b1 e0       	ldi	r27, 0x01	; 1
 2da:	88 e5       	ldi	r24, 0x58	; 88
 2dc:	8c 93       	st	X, r24
	cmd_stop_broadcast[1] = '\r';
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	8c 93       	st	X, r24
 2e4:	11 97       	sbiw	r26, 0x01	; 1
	// RN4020 command, start broadcast.
	// interval 500ms for 2sencond.
	cmd_start_broadcast[0] = 'A';
 2e6:	e8 e4       	ldi	r30, 0x48	; 72
 2e8:	f1 e0       	ldi	r31, 0x01	; 1
 2ea:	91 e4       	ldi	r25, 0x41	; 65
 2ec:	90 83       	st	Z, r25
	cmd_start_broadcast[1] = ',';	
 2ee:	9c e2       	ldi	r25, 0x2C	; 44
 2f0:	91 83       	std	Z+1, r25	; 0x01
	cmd_start_broadcast[2] = '0';
 2f2:	20 e3       	ldi	r18, 0x30	; 48
 2f4:	22 83       	std	Z+2, r18	; 0x02
	cmd_start_broadcast[3] = '1';
 2f6:	31 e3       	ldi	r19, 0x31	; 49
 2f8:	33 83       	std	Z+3, r19	; 0x03
	cmd_start_broadcast[4] = 'F';
 2fa:	36 e4       	ldi	r19, 0x46	; 70
 2fc:	34 83       	std	Z+4, r19	; 0x04
	cmd_start_broadcast[5] = '4';
 2fe:	34 e3       	ldi	r19, 0x34	; 52
 300:	35 83       	std	Z+5, r19	; 0x05
	cmd_start_broadcast[6] = ',';
 302:	96 83       	std	Z+6, r25	; 0x06
	cmd_start_broadcast[7] = '0';
 304:	27 83       	std	Z+7, r18	; 0x07
	cmd_start_broadcast[8] = '7';
 306:	37 e3       	ldi	r19, 0x37	; 55
 308:	30 87       	std	Z+8, r19	; 0x08
	cmd_start_broadcast[9] = 'D';
 30a:	34 e4       	ldi	r19, 0x44	; 68
 30c:	31 87       	std	Z+9, r19	; 0x09
	cmd_start_broadcast[10] = '0';
 30e:	22 87       	std	Z+10, r18	; 0x0a
	cmd_start_broadcast[11] = '\r';			
 310:	83 87       	std	Z+11, r24	; 0x0b
	// RN4020 command, broadcast data update.
	hih6130_value[0] = 'N';
 312:	e7 e5       	ldi	r30, 0x57	; 87
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	2e e4       	ldi	r18, 0x4E	; 78
 318:	20 83       	st	Z, r18
	hih6130_value[1] = ',';
 31a:	91 83       	std	Z+1, r25	; 0x01
	// CR character.	
	hih6130_value[10] = '\r';
 31c:	82 87       	std	Z+10, r24	; 0x0a
	// Reset task counter.
	dev_task_cnt = 0;
 31e:	10 92 75 01 	sts	0x0175, r1
	// Stop broad cast.
	puart0_trn_data = cmd_stop_broadcast;
 322:	b0 93 01 01 	sts	0x0101, r27
 326:	a0 93 00 01 	sts	0x0100, r26
	uart0_trn_cnt = 2;
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	80 93 64 01 	sts	0x0164, r24
			
	// Enable global interrupt.
	sei();
 330:	78 94       	sei

	// Power on delay.
	meas_delay = 50;
 332:	82 e3       	ldi	r24, 0x32	; 50
 334:	80 93 77 01 	sts	0x0177, r24
	while( meas_delay ){
		// Timer #0 task.
		Timer0_Task();
 338:	0e 94 b2 01 	call	0x364	; 0x364 <Timer0_Task>
	// Enable global interrupt.
	sei();

	// Power on delay.
	meas_delay = 50;
	while( meas_delay ){
 33c:	80 91 77 01 	lds	r24, 0x0177
 340:	81 11       	cpse	r24, r1
 342:	fa cf       	rjmp	.-12     	; 0x338 <main+0x78>
	
    /* Replace with your application code */
    while (1) 
    {
		// Timer #0 task.
		Timer0_Task();
 344:	0e 94 b2 01 	call	0x364	; 0x364 <Timer0_Task>
		// UART #0 transmit task.
		UART0_Trn_Task();
 348:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UART0_Trn_Task>
		// TWI #0 task.
		TWI0_Task();
 34c:	0e 94 ed 01 	call	0x3da	; 0x3da <TWI0_Task>
		// TWI #0 device task.
		Device_Task();		
 350:	0e 94 8e 00 	call	0x11c	; 0x11c <Device_Task>
    }
 354:	f7 cf       	rjmp	.-18     	; 0x344 <main+0x84>

00000356 <Timer0_Init>:
{
	// 8MHz oscillator, 0.125us * 1024 = 128us.
	// period, 128us * 256 = 32.768 ms.	
	
	// CTC mode, no output.
	TCCR0A = 0x02;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	84 bd       	out	0x24, r24	; 36
	// Prescaler 1024.
	TCCR0B = 0x05; 
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	85 bd       	out	0x25, r24	; 37
	// comparator A.
	// - 10ms / 256us = 38.
	OCR0A = 39;
 35e:	87 e2       	ldi	r24, 0x27	; 39
 360:	87 bd       	out	0x27, r24	; 39
 362:	08 95       	ret

00000364 <Timer0_Task>:

// Timer #0 task.
void Timer0_Task( void )
{
	// Check interrupt flag bit. 
	temp1 = TIFR0;
 364:	85 b3       	in	r24, 0x15	; 21
	temp1 &= 0x02;
 366:	82 70       	andi	r24, 0x02	; 2
 368:	80 93 54 01 	sts	0x0154, r24
	if( temp1 == 0 ){
 36c:	88 23       	and	r24, r24
 36e:	c1 f0       	breq	.+48     	; 0x3a0 <Timer0_Task+0x3c>
		return;
	}
	// About 10ms past.
	// Clear flag bit.
	TIFR0 |= 0x02;	
 370:	a9 9a       	sbi	0x15, 1	; 21
	// UART #0 received time out.
	if( uart0_rec_cnt ){
 372:	80 91 56 01 	lds	r24, 0x0156
 376:	88 23       	and	r24, r24
 378:	61 f0       	breq	.+24     	; 0x392 <Timer0_Task+0x2e>
		++uart0_rec_to;
 37a:	80 91 76 01 	lds	r24, 0x0176
 37e:	8f 5f       	subi	r24, 0xFF	; 255
		if( uart0_rec_to == 20 ){
 380:	84 31       	cpi	r24, 0x14	; 20
 382:	19 f0       	breq	.+6      	; 0x38a <Timer0_Task+0x26>
	// About 10ms past.
	// Clear flag bit.
	TIFR0 |= 0x02;	
	// UART #0 received time out.
	if( uart0_rec_cnt ){
		++uart0_rec_to;
 384:	80 93 76 01 	sts	0x0176, r24
 388:	04 c0       	rjmp	.+8      	; 0x392 <Timer0_Task+0x2e>
		if( uart0_rec_to == 20 ){
			uart0_rec_to = 0;
 38a:	10 92 76 01 	sts	0x0176, r1
			uart0_rec_cnt = 0;
 38e:	10 92 56 01 	sts	0x0156, r1
		}		
	}
	// measurement delay.
	if( meas_delay ){
 392:	80 91 77 01 	lds	r24, 0x0177
 396:	88 23       	and	r24, r24
 398:	19 f0       	breq	.+6      	; 0x3a0 <Timer0_Task+0x3c>
		--meas_delay;
 39a:	81 50       	subi	r24, 0x01	; 1
 39c:	80 93 77 01 	sts	0x0177, r24
 3a0:	08 95       	ret

000003a2 <TWI0_Init>:
// TWI #0 initialize.
void TWI0_Init( void )
{
	//TWI ( I2C also ).
	// - 100KHz @ 8MHz.
	TWBR0 = 32;
 3a2:	80 e2       	ldi	r24, 0x20	; 32
 3a4:	80 93 b8 00 	sts	0x00B8, r24
 3a8:	08 95       	ret

000003aa <TWI0_On_Write>:

// TWI #0 write task trigger on.
void TWI0_On_Write( void )
{
	// Reset task counter.
	twi0_task_cnt = 1;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 03 01 	sts	0x0103, r24
	// Set busy flag bit.
	twi0_task_status |= 0x01;
 3b0:	80 91 04 01 	lds	r24, 0x0104
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	80 93 04 01 	sts	0x0104, r24
	// Send start condition.
	TWCR0 = 0xa4;	
 3ba:	84 ea       	ldi	r24, 0xA4	; 164
 3bc:	80 93 bc 00 	sts	0x00BC, r24
 3c0:	08 95       	ret

000003c2 <TWI0_On_Read>:

// TWI #0 read task trigger on.
void TWI0_On_Read( void )
{
	// Reset task counter.
	twi0_task_cnt = 6;
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	80 93 03 01 	sts	0x0103, r24
	// Set busy flag bit.
	twi0_task_status |= 0x01;	
 3c8:	80 91 04 01 	lds	r24, 0x0104
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	80 93 04 01 	sts	0x0104, r24
	// Send start condition.
	TWCR0 = 0xa4;	
 3d2:	84 ea       	ldi	r24, 0xA4	; 164
 3d4:	80 93 bc 00 	sts	0x00BC, r24
 3d8:	08 95       	ret

000003da <TWI0_Task>:

// TWI #0 task.
void TWI0_Task( void )
{
	// Check interrupt flag.
	temp1 = TWCR0;
 3da:	80 91 bc 00 	lds	r24, 0x00BC
	temp1 &= 0x80;
 3de:	80 78       	andi	r24, 0x80	; 128
 3e0:	80 93 54 01 	sts	0x0154, r24
	if( temp1 == 0x00 ){
 3e4:	88 23       	and	r24, r24
 3e6:	09 f4       	brne	.+2      	; 0x3ea <TWI0_Task+0x10>
 3e8:	c9 c0       	rjmp	.+402    	; 0x57c <TWI0_Task+0x1a2>
	}
	// Clear flag bit.
	//TWCR |= 0x80;
	
	// Get status code.
	temp1 = TWSR0;
 3ea:	20 91 b9 00 	lds	r18, 0x00B9
	temp1 &= 0xf8;
 3ee:	28 7f       	andi	r18, 0xF8	; 248
 3f0:	20 93 54 01 	sts	0x0154, r18
	
	switch( twi0_task_cnt ){
 3f4:	e0 91 03 01 	lds	r30, 0x0103
 3f8:	8e 2f       	mov	r24, r30
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	e4 31       	cpi	r30, 0x14	; 20
 402:	f1 05       	cpc	r31, r1
 404:	08 f0       	brcs	.+2      	; 0x408 <TWI0_Task+0x2e>
 406:	ba c0       	rjmp	.+372    	; 0x57c <TWI0_Task+0x1a2>
 408:	e6 5a       	subi	r30, 0xA6	; 166
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	0c 94 0b 03 	jmp	0x616	; 0x616 <__tablejump2__>
		
		// SLA + W was send.
		case 12:
		// Send control word.
		TWDR0 = twi0_word;
 410:	80 91 55 01 	lds	r24, 0x0155
 414:	80 93 bb 00 	sts	0x00BB, r24
		// 1.) Clear interrupt flag,
		// 2.) and trigger on.
		TWCR0 = 0x84;
 418:	84 e8       	ldi	r24, 0x84	; 132
 41a:	80 93 bc 00 	sts	0x00BC, r24
		// Next task.
		++twi0_task_cnt;
 41e:	80 91 03 01 	lds	r24, 0x0103
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 03 01 	sts	0x0103, r24
		break;
 428:	08 95       	ret
		case 13:
		// Restart condition.
		// 1.) Clear interrupt flag,
		// 2.) Start condition.
		// 3.) and trigger on.
		TWCR0 = 0xa4;
 42a:	84 ea       	ldi	r24, 0xA4	; 164
 42c:	80 93 bc 00 	sts	0x00BC, r24
		// Next task.
		++twi0_task_cnt;
 430:	80 91 03 01 	lds	r24, 0x0103
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	80 93 03 01 	sts	0x0103, r24
		break;
 43a:	08 95       	ret
		// SLA+R was send.
		case 15:
		case 7:
		// Check ACK or NACK.
		// NACK
		if( temp1 == 0x48){
 43c:	28 34       	cpi	r18, 0x48	; 72
 43e:	59 f4       	brne	.+22     	; 0x456 <TWI0_Task+0x7c>
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR0 = 0x94;
 440:	84 e9       	ldi	r24, 0x94	; 148
 442:	80 93 bc 00 	sts	0x00BC, r24
			// Clear flag bit.
			twi0_task_status &= 0xfe;
 446:	80 91 04 01 	lds	r24, 0x0104
 44a:	8e 7f       	andi	r24, 0xFE	; 254
 44c:	80 93 04 01 	sts	0x0104, r24
			// NACK check.
			twi0_task_cnt = 0;
 450:	10 92 03 01 	sts	0x0103, r1
			return;
 454:	08 95       	ret
		}
		// 1.) Clear interrupt flag.
		// 2.) Prepare received data and return ACK.
		// 3.) Trigger on.
		TWCR0 = 0xC4;
 456:	84 ec       	ldi	r24, 0xC4	; 196
 458:	80 93 bc 00 	sts	0x00BC, r24
		// Next task.
		++twi0_task_cnt;
 45c:	80 91 03 01 	lds	r24, 0x0103
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 03 01 	sts	0x0103, r24
		break;
 466:	08 95       	ret
		case 16:
		case 8:
		// check status data received and ACK return.
		
		// Hold shifter data.
		twi0_data[twi0_data_index] = TWDR0;
 468:	80 91 26 01 	lds	r24, 0x0126
 46c:	90 91 bb 00 	lds	r25, 0x00BB
 470:	e8 2f       	mov	r30, r24
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	ea 5f       	subi	r30, 0xFA	; 250
 476:	fe 4f       	sbci	r31, 0xFE	; 254
 478:	90 83       	st	Z, r25
		// Next byte data.
		++twi0_data_index;
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	80 93 26 01 	sts	0x0126, r24
		--twi0_data_cnt;
 480:	80 91 02 01 	lds	r24, 0x0102
 484:	81 50       	subi	r24, 0x01	; 1
 486:	80 93 02 01 	sts	0x0102, r24
		
		// Check data counter.
		if( twi0_data_cnt == 1 ){
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	49 f4       	brne	.+18     	; 0x4a0 <TWI0_Task+0xc6>
			// Prepare receive first byte data.
			
			// 1.) Clear interrupt flag.
			// 2.) Received data and return NACK.
			// 3.) Trigger on.
			TWCR0 = 0x84;
 48e:	84 e8       	ldi	r24, 0x84	; 132
 490:	80 93 bc 00 	sts	0x00BC, r24
			// Next task.
			++twi0_task_cnt;
 494:	80 91 03 01 	lds	r24, 0x0103
 498:	8f 5f       	subi	r24, 0xFF	; 255
 49a:	80 93 03 01 	sts	0x0103, r24
 49e:	08 95       	ret
		}
		else{
			// 1.) Clear interrupt flag.
			// 2.) Received data and return ACK.
			// 3.) Trigger on.
			TWCR0 = 0xC4;
 4a0:	84 ec       	ldi	r24, 0xC4	; 196
 4a2:	80 93 bc 00 	sts	0x00BC, r24
 4a6:	08 95       	ret

		// All data received.
		case 17:
		case 9:
		// Hold shifter data.
		twi0_data[twi0_data_index] = TWDR0;
 4a8:	80 91 bb 00 	lds	r24, 0x00BB
 4ac:	e0 91 26 01 	lds	r30, 0x0126
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	ea 5f       	subi	r30, 0xFA	; 250
 4b4:	fe 4f       	sbci	r31, 0xFE	; 254
 4b6:	80 83       	st	Z, r24
		case 3:
		// Stop condition out.
		// 1.) Clear interrupt flag,
		// 2.) stop condition,
		// 3.) trigger on TWI.
		TWCR0 = 0x94;
 4b8:	84 e9       	ldi	r24, 0x94	; 148
 4ba:	80 93 bc 00 	sts	0x00BC, r24
		// Clear flag bit.
		twi0_task_status &= 0xfe;
 4be:	80 91 04 01 	lds	r24, 0x0104
 4c2:	8e 7f       	andi	r24, 0xFE	; 254
 4c4:	80 93 04 01 	sts	0x0104, r24
		// Next task.
		++twi0_task_cnt;
 4c8:	80 91 03 01 	lds	r24, 0x0103
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	80 93 03 01 	sts	0x0103, r24
		break;
 4d2:	08 95       	ret
		// SLA+W was send or
		// Data was send.
		case 2:
		// ACK or NACK check.
		// Only ACK.
		if( temp1 == 0x18 || temp1 == 0x28 ){
 4d4:	28 31       	cpi	r18, 0x18	; 24
 4d6:	11 f0       	breq	.+4      	; 0x4dc <TWI0_Task+0x102>
 4d8:	28 32       	cpi	r18, 0x28	; 40
 4da:	e9 f4       	brne	.+58     	; 0x516 <TWI0_Task+0x13c>
			// Send data.
			TWDR0 = twi0_data[twi0_data_index];
 4dc:	e0 91 26 01 	lds	r30, 0x0126
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	ea 5f       	subi	r30, 0xFA	; 250
 4e4:	fe 4f       	sbci	r31, 0xFE	; 254
 4e6:	80 81       	ld	r24, Z
 4e8:	80 93 bb 00 	sts	0x00BB, r24
			// 1.) Clear interrupt flag,
			// 2.) and trigger on.
			TWCR0 = 0x84;
 4ec:	84 e8       	ldi	r24, 0x84	; 132
 4ee:	80 93 bc 00 	sts	0x00BC, r24
			// Next data.
			--twi0_data_cnt;
 4f2:	80 91 02 01 	lds	r24, 0x0102
 4f6:	81 50       	subi	r24, 0x01	; 1
 4f8:	80 93 02 01 	sts	0x0102, r24
			++twi0_data_index;
 4fc:	90 91 26 01 	lds	r25, 0x0126
 500:	9f 5f       	subi	r25, 0xFF	; 255
 502:	90 93 26 01 	sts	0x0126, r25
			if( twi0_data_cnt != 0 ){
 506:	81 11       	cpse	r24, r1
 508:	39 c0       	rjmp	.+114    	; 0x57c <TWI0_Task+0x1a2>
				return;
			}
			// Next task.
			++twi0_task_cnt;
 50a:	80 91 03 01 	lds	r24, 0x0103
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 93 03 01 	sts	0x0103, r24
			return;
 514:	08 95       	ret
		}
		else if( temp1 == 0x20 ){
 516:	20 32       	cpi	r18, 0x20	; 32
 518:	41 f4       	brne	.+16     	; 0x52a <TWI0_Task+0x150>
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR0 = 0x94;
 51a:	84 e9       	ldi	r24, 0x94	; 148
 51c:	80 93 bc 00 	sts	0x00BC, r24
			// Clear flag bit.
			twi0_task_status &= 0xfe;
 520:	80 91 04 01 	lds	r24, 0x0104
 524:	8e 7f       	andi	r24, 0xFE	; 254
 526:	80 93 04 01 	sts	0x0104, r24
		}
		// Error check.
		twi0_task_cnt = 0;
 52a:	10 92 03 01 	sts	0x0103, r1
		break;
 52e:	08 95       	ret
		case 20: // <--- for HIH6130 start measurement.
			// Stop condition out.
			// 1.) Clear interrupt flag,
			// 2.) stop condition,
			// 3.) trigger on TWI.
			TWCR0 = 0x94;
 530:	84 e9       	ldi	r24, 0x94	; 148
 532:	80 93 bc 00 	sts	0x00BC, r24
			// Clear flag bit.
			twi0_task_status &= 0xfe;
 536:	80 91 04 01 	lds	r24, 0x0104
 53a:	8e 7f       	andi	r24, 0xFE	; 254
 53c:	80 93 04 01 	sts	0x0104, r24
			// Next task.
			++twi0_task_cnt;			
 540:	80 91 03 01 	lds	r24, 0x0103
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 03 01 	sts	0x0103, r24
			break;
 54a:	08 95       	ret
		
		// Start condition was send.
		case 14:
		twi0_addr |= 0x01;
 54c:	80 91 7a 01 	lds	r24, 0x017A
 550:	81 60       	ori	r24, 0x01	; 1
 552:	80 93 7a 01 	sts	0x017A, r24
		case 19:	// <--- for HIH6130 only write SLA + W to start measure.
		case 11:
		case 6:
		case 1:
		// Error check.
		if( temp1 != 0x08 ){
 556:	28 30       	cpi	r18, 0x08	; 8
 558:	19 f0       	breq	.+6      	; 0x560 <TWI0_Task+0x186>
			twi0_task_cnt = 0;
 55a:	10 92 03 01 	sts	0x0103, r1
			return;
 55e:	08 95       	ret
		}
		// Send SLA + W or SLA + R.
		TWDR0 = twi0_addr;
 560:	80 91 7a 01 	lds	r24, 0x017A
 564:	80 93 bb 00 	sts	0x00BB, r24
		// 1.) Clear interrupt flag,
		// 2.) and trigger on.
		TWCR0 = 0x84;
 568:	84 e8       	ldi	r24, 0x84	; 132
 56a:	80 93 bc 00 	sts	0x00BC, r24
		// Clear data index.
		twi0_data_index = 0;
 56e:	10 92 26 01 	sts	0x0126, r1
		// Next task.
		++twi0_task_cnt;
 572:	80 91 03 01 	lds	r24, 0x0103
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	80 93 03 01 	sts	0x0103, r24
 57c:	08 95       	ret

0000057e <__vector_18>:
#include "UART_Task.h"
#include "var.h"

// UART #0 received ISR.
ISR( USART0_RX_vect )
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	// Clear received time out.
	uart0_rec_to = 0;
 590:	10 92 76 01 	sts	0x0176, r1
	// Hold received data.
	uart0_rec_data[uart0_rec_cnt] = UDR0;
 594:	80 91 56 01 	lds	r24, 0x0156
 598:	90 91 c6 00 	lds	r25, 0x00C6
 59c:	e8 2f       	mov	r30, r24
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	e9 5d       	subi	r30, 0xD9	; 217
 5a2:	fe 4f       	sbci	r31, 0xFE	; 254
 5a4:	90 83       	st	Z, r25
	if( uart0_rec_cnt < 32 ){
 5a6:	80 32       	cpi	r24, 0x20	; 32
 5a8:	18 f4       	brcc	.+6      	; 0x5b0 <__vector_18+0x32>
		++uart0_rec_cnt;
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	80 93 56 01 	sts	0x0156, r24
	} 
}
 5b0:	ff 91       	pop	r31
 5b2:	ef 91       	pop	r30
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <UART0_Init>:

// UART #0 initialize.
void UART0_Init( void )
{
	// 9600 bps @ 8MHz.
	UBRR0H = 0;
 5c2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 51;
 5c6:	83 e3       	ldi	r24, 0x33	; 51
 5c8:	80 93 c4 00 	sts	0x00C4, r24
	// RX interrupt enable.
	// RX enable.
	// TX enable.
	// 8 bit data.
	// No parity.
	UCSR0B = 0x98;	
 5cc:	88 e9       	ldi	r24, 0x98	; 152
 5ce:	80 93 c1 00 	sts	0x00C1, r24
 5d2:	08 95       	ret

000005d4 <UART0_Trn_Task>:

// UART #0 transmit task.
void UART0_Trn_Task( void )
{
	// Check data counter.
	if( uart0_trn_cnt == 0 ){
 5d4:	80 91 64 01 	lds	r24, 0x0164
 5d8:	88 23       	and	r24, r24
 5da:	e1 f0       	breq	.+56     	; 0x614 <UART0_Trn_Task+0x40>
		return;
	}
	// Check transmit buffer.
	temp1 = UCSR0A;
 5dc:	80 91 c0 00 	lds	r24, 0x00C0
	temp1 &= 0x20;
 5e0:	80 72       	andi	r24, 0x20	; 32
 5e2:	80 93 54 01 	sts	0x0154, r24
	if( temp1 == 0 ){
 5e6:	88 23       	and	r24, r24
 5e8:	a9 f0       	breq	.+42     	; 0x614 <UART0_Trn_Task+0x40>
		return;
	}
	// Data out.
	UDR0 = *puart0_trn_data;
 5ea:	e0 91 00 01 	lds	r30, 0x0100
 5ee:	f0 91 01 01 	lds	r31, 0x0101
 5f2:	80 81       	ld	r24, Z
 5f4:	80 93 c6 00 	sts	0x00C6, r24
	// Next data.
	++puart0_trn_data;
 5f8:	80 91 00 01 	lds	r24, 0x0100
 5fc:	90 91 01 01 	lds	r25, 0x0101
 600:	01 96       	adiw	r24, 0x01	; 1
 602:	90 93 01 01 	sts	0x0101, r25
 606:	80 93 00 01 	sts	0x0100, r24
	--uart0_trn_cnt;
 60a:	80 91 64 01 	lds	r24, 0x0164
 60e:	81 50       	subi	r24, 0x01	; 1
 610:	80 93 64 01 	sts	0x0164, r24
 614:	08 95       	ret

00000616 <__tablejump2__>:
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	05 90       	lpm	r0, Z+
 61c:	f4 91       	lpm	r31, Z
 61e:	e0 2d       	mov	r30, r0
 620:	09 94       	ijmp

00000622 <_exit>:
 622:	f8 94       	cli

00000624 <__stop_program>:
 624:	ff cf       	rjmp	.-2      	; 0x624 <__stop_program>
